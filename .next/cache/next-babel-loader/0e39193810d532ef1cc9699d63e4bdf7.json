{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      getProduct @client {\\n        price\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { QUERY_PRODUCT_PRICE, MUTATION_PRICE } from '../graphql';\nimport { addNotification } from '../utils/toast';\nimport { Growing } from '../components/Spinner';\nimport { Alert } from '../components/Alerts';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nvar Dashboard = function Dashboard() {\n  var _useState = useState([]),\n      notifications = _useState[0],\n      updateNotifications = _useState[1]; // Querys\n\n\n  var _useQuery = useQuery(QUERY_PRODUCT_PRICE, {\n    onError: function onError(error) {\n      console.log(error);\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data; // Mutations\n\n\n  var _useMutation = useMutation(MUTATION_PRICE, {\n    onError: function onError(error) {\n      console.log(error);\n    },\n    onCompleted: function onCompleted() {\n      addNotification('Notification', \"Your price has been updated to $\".concat(localData.getProduct.price.toFixed(2)), 'info', notifications, updateNotifications);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updatePrice = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      MutationUpdatePriceLoading = _useMutation2$.loading,\n      MutationUpdatePriceError = _useMutation2$.error; // Local Methods\n\n\n  var removeNotification = function removeNotification(id) {\n    var data = notifications;\n    var toasts = data.filter(function (item) {\n      return item.id !== id;\n    });\n    updateNotifications(toasts);\n  };\n\n  var client = useApolloClient();\n\n  var onChangeMe = function onChangeMe(e) {\n    var price = parseFloat(e.target.value);\n    client.writeData({\n      data: {\n        getProduct: {\n          id: '123',\n          price: price,\n          __typename: 'Product'\n        }\n      }\n    });\n  };\n\n  if (loading) {\n    return __jsx(Growing, {\n      visible: true,\n      fullScreen: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (error) return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(Alert, {\n    type: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Network Error.\")); // const {\n  //   getProduct: { price },\n  // } = data;\n\n  var QUERY_PRODUCT = gql(_templateObject()); // const QUERY_PRODUCTS = gql`\n  //   query {\n  //     allProducts @client\n  //   }\n  // `;\n  // const { data: localDatas } = useQuery(QUERY_PRODUCTS);\n\n  var _useQuery2 = useQuery(QUERY_PRODUCT),\n      localData = _useQuery2.data;\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, console.log(localData));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard.tsx"],"names":["React","useState","useQuery","useMutation","QUERY_PRODUCT_PRICE","MUTATION_PRICE","addNotification","Growing","Alert","useApolloClient","gql","Dashboard","notifications","updateNotifications","onError","error","console","log","loading","data","onCompleted","localData","getProduct","price","toFixed","updatePrice","MutationUpdatePriceLoading","MutationUpdatePriceError","removeNotification","id","toasts","filter","item","client","onChangeMe","e","parseFloat","target","value","writeData","__typename","QUERY_PRODUCT"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { QUERY_PRODUCT_PRICE, MUTATION_PRICE } from '../graphql';\nimport { addNotification } from '../utils/toast';\nimport { submitPrice } from '../utils/price';\nimport ToastContainer from '../components/ToastContainer';\nimport { Card, CardBody, CardTitle } from '../components/Card';\nimport { FormGroup, InputPrice } from '../components/Form';\nimport { Button } from '../components/Button';\nimport { Growing } from '../components/Spinner';\nimport { Alert } from '../components/Alerts';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nexport interface DashboardState {\n  price: number;\n}\n\ninterface ProductInventoryData {\n  getProduct: ProductInventory;\n}\n\ninterface ProductInventory {\n  price: number;\n}\n\nconst Dashboard: React.FC = () => {\n  const [notifications, updateNotifications] = useState([]);\n\n  // Querys\n  const { loading, error, data } = useQuery<ProductInventoryData>(\n    QUERY_PRODUCT_PRICE,\n    {\n      onError: (error) => {\n        console.log(error);\n      },\n    }\n  );\n\n  // Mutations\n  const [\n    updatePrice,\n    { loading: MutationUpdatePriceLoading, error: MutationUpdatePriceError },\n  ] = useMutation(MUTATION_PRICE, {\n    onError: (error) => {\n      console.log(error);\n    },\n    onCompleted: () => {\n      addNotification(\n        'Notification',\n        `Your price has been updated to $${localData.getProduct.price.toFixed(\n          2\n        )}`,\n        'info',\n        notifications,\n        updateNotifications\n      );\n    },\n  });\n\n  // Local Methods\n  const removeNotification = (id: number) => {\n    const data = notifications;\n    const toasts = data.filter((item): any => item.id !== id);\n\n    updateNotifications(toasts);\n  };\n\n  const client = useApolloClient();\n\n  const onChangeMe = (e) => {\n    const price = parseFloat(e.target.value);\n\n    client.writeData({\n      data: {\n        getProduct: {\n          id: '123',\n          price,\n          __typename: 'Product',\n        },\n      },\n    });\n  };\n\n  if (loading) {\n    return <Growing visible={true} fullScreen={true} />;\n  }\n\n  if (error)\n    return (\n      <div className=\"container\">\n        <Alert type=\"danger\">Network Error.</Alert>\n      </div>\n    );\n\n  // const {\n  //   getProduct: { price },\n  // } = data;\n\n  const QUERY_PRODUCT = gql`\n    query {\n      getProduct @client {\n        price\n      }\n    }\n  `;\n\n  // const QUERY_PRODUCTS = gql`\n  //   query {\n  //     allProducts @client\n  //   }\n  // `;\n\n  // const { data: localDatas } = useQuery(QUERY_PRODUCTS);\n  const { data: localData } = useQuery(QUERY_PRODUCT);\n\n  return (\n    <div className=\"container\">\n      {/* {console.log(localDatas)} */}\n      {console.log(localData)}\n      {/* <ToastContainer\n        allToasts={notifications}\n        removeNotification={removeNotification}\n      /> */}\n      {/* <div className=\"row align-items-center\">\n        <div className=\"p-3 mb-3 col-3\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                Item Price: {localData.getProduct.price.toFixed(2)}\n              </CardTitle>\n              <form onSubmit={() => event.preventDefault()}>\n                <FormGroup>\n                  <InputPrice\n                    onChange={onChangeMe}\n                    labelTitle=\"Item Price\"\n                    price={localData.getProduct.price.toFixed(2)}\n                  />\n                  <Button\n                    submitPrice={submitPrice}\n                    updatePrice={updatePrice}\n                    query={QUERY_PRODUCT_PRICE}\n                    mutateLoading={MutationUpdatePriceLoading}\n                    price={localData.getProduct.price}\n                  >\n                    <Growing visible={MutationUpdatePriceLoading} />\n                    {MutationUpdatePriceLoading ? ' Loading...' : 'Update'}\n                    {MutationUpdatePriceError ? 'Network error occured.' : ''}\n                  </Button>\n                </FormGroup>\n              </form>\n            </CardBody>\n          </Card>\n        </div>\n      </div> */}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}