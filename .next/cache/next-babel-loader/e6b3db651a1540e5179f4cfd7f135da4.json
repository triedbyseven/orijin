{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch'; //Resolvers\n\nvar Query = require('../client/resolvers/Query');\n\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!true) {\n  global.fetch = fetch;\n}\n\nvar resolvers = {\n  Query: Query\n};\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: true,\n    ssrMode: !true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache().restore(initialState || {}),\n    resolvers: {\n      Query: {\n        getGlobalConfig: function getGlobalConfig(launch, _args, _ref) {\n          var cache = _ref.cache;\n          // const { cartItems } = cache.readQuery({ query: GET_CART_ITEMS });\n          // return cartItems.includes(launch.id);\n          console.log('Whoa');\n        }\n      }\n    }\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!true) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/lib/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","Query","require","apolloClient","global","resolvers","create","initialState","connectToDevTools","ssrMode","link","uri","credentials","cache","restore","getGlobalConfig","launch","_args","console","log","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,2BAAD,CAArB;;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,KAAJ,EAAsB;AACpBC,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACD;;AAED,IAAMK,SAAS,GAAG;AAChBJ,EAAAA,KAAK,EAALA;AADgB,CAAlB;;AAIA,SAASK,MAAT,CAAgBC,YAAhB,EAA8B;AAC5B;AACA,SAAO,IAAIV,YAAJ,CAAiB;AACtBW,IAAAA,iBAAiB,MADK;AAEtBC,IAAAA,OAAO,EAAE,KAFa;AAEK;AAC3BC,IAAAA,IAAI,EAAE,IAAIX,QAAJ,CAAa;AACjBY,MAAAA,GAAG,EAAE,mCADY;AACyB;AAC1CC,MAAAA,WAAW,EAAE,aAFI,CAEW;;AAFX,KAAb,CAHgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIf,aAAJ,GAAoBgB,OAApB,CAA4BP,YAAY,IAAI,EAA5C,CAPe;AAQtBF,IAAAA,SAAS,EAAE;AACTJ,MAAAA,KAAK,EAAE;AACLc,QAAAA,eAAe,EAAE,yBAACC,MAAD,EAASC,KAAT,QAA8B;AAAA,cAAZJ,KAAY,QAAZA,KAAY;AAC7C;AACA;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AALI;AADE;AARW,GAAjB,CAAP;AAkBD;;AAED,eAAe,SAASC,UAAT,CAAoBb,YAApB,EAAkC;AAC/C;AACA;AACA,MAAI,KAAJ,EAAsB;AACpB,WAAOD,MAAM,CAACC,YAAD,CAAb;AACD,GAL8C,CAO/C;;;AACA,MAAI,CAACJ,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGG,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOJ,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\n//Resolvers\nconst Query = require('../client/resolvers/Query');\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nconst resolvers = {\n  Query,\n};\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache().restore(initialState || {}),\n    resolvers: {\n      Query: {\n        getGlobalConfig: (launch, _args, { cache }) => {\n          // const { cartItems } = cache.readQuery({ query: GET_CART_ITEMS });\n          // return cartItems.includes(launch.id);\n          console.log('Whoa');\n        },\n      },\n    },\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}