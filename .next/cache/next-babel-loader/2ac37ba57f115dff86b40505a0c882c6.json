{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch'; //Resolvers\n\nconst Query = require('../client/resolvers/Query');\n\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!false) {\n  global.fetch = fetch;\n}\n\nconst resolvers = {\n  Query\n};\n\nfunction create(initialState) {\n  const cache = new InMemoryCache();\n  cache.writeData({\n    data: {\n      getGlobalConfig: {\n        // businessName: '',\n        fullName: '',\n        __typename: 'Config'\n      },\n      products: []\n    }\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    connectToDevTools: false,\n    ssrMode: !false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache,\n    resolvers\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!false) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/lib/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","Query","require","apolloClient","global","resolvers","create","initialState","cache","writeData","data","getGlobalConfig","fullName","__typename","products","connectToDevTools","ssrMode","link","uri","credentials","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,2BAAD,CAArB;;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,MAAJ,EAAsB;AACpBC,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACD;;AAED,MAAMK,SAAS,GAAG;AAChBJ,EAAAA;AADgB,CAAlB;;AAIA,SAASK,MAAT,CAAgBC,YAAhB,EAA8B;AAC5B,QAAMC,KAAK,GAAG,IAAIV,aAAJ,EAAd;AACAU,EAAAA,KAAK,CAACC,SAAN,CAAgB;AACdC,IAAAA,IAAI,EAAE;AACJC,MAAAA,eAAe,EAAE;AACf;AACAC,QAAAA,QAAQ,EAAE,EAFK;AAGfC,QAAAA,UAAU,EAAE;AAHG,OADb;AAMJC,MAAAA,QAAQ,EAAE;AANN;AADQ,GAAhB,EAF4B,CAY5B;;AACA,SAAO,IAAIjB,YAAJ,CAAiB;AACtBkB,IAAAA,iBAAiB,OADK;AAEtBC,IAAAA,OAAO,EAAE,MAFa;AAEK;AAC3BC,IAAAA,IAAI,EAAE,IAAIlB,QAAJ,CAAa;AACjBmB,MAAAA,GAAG,EAAE,mCADY;AACyB;AAC1CC,MAAAA,WAAW,EAAE,aAFI,CAEW;;AAFX,KAAb,CAHgB;AAOtBX,IAAAA,KAPsB;AAQtBH,IAAAA;AARsB,GAAjB,CAAP;AAUD;;AAED,eAAe,SAASe,UAAT,CAAoBb,YAApB,EAAkC;AAC/C;AACA;AACA,MAAI,MAAJ,EAAsB;AACpB,WAAOD,MAAM,CAACC,YAAD,CAAb;AACD,GAL8C,CAO/C;;;AACA,MAAI,CAACJ,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGG,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOJ,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\n//Resolvers\nconst Query = require('../client/resolvers/Query');\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nconst resolvers = {\n  Query,\n};\n\nfunction create(initialState) {\n  const cache = new InMemoryCache();\n  cache.writeData({\n    data: {\n      getGlobalConfig: {\n        // businessName: '',\n        fullName: '',\n        __typename: 'Config',\n      },\n      products: [],\n    },\n  });\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache,\n    resolvers,\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}