{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { QUERY_GLOBAL_CONFIG } from '../../graphql';\nimport { execute, makePromise } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nvar uri = 'http://localhost:3000/api/graphql';\nvar link = new HttpLink({\n  uri: uri\n});\nvar operation = {\n  query: QUERY_GLOBAL_CONFIG\n};\nexport default function () {\n  var _useState = useState({\n    data: {},\n    loading: false\n  }),\n      config = _useState[0],\n      updateConfig = _useState[1];\n\n  function myFunc() {\n    var response;\n    return _regeneratorRuntime.async(function myFunc$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            updateConfig(function (prevState) {\n              return _objectSpread({}, prevState, {\n                loading: true\n              });\n            });\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(makePromise(execute(link, operation)));\n\n          case 4:\n            response = _context.sent;\n            updateConfig({\n              data: response,\n              loading: false\n            });\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"received error \".concat(_context.t0));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  useEffect(function () {\n    myFunc();\n  }, []);\n  return config;\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/src/customHooks/useConfigQuery.ts"],"names":["useState","useEffect","QUERY_GLOBAL_CONFIG","execute","makePromise","HttpLink","uri","link","operation","query","data","loading","config","updateConfig","myFunc","prevState","response","console","log"],"mappings":";;;;;;;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,IAAMC,GAAG,GAAG,mCAAZ;AACA,IAAMC,IAAI,GAAG,IAAIF,QAAJ,CAAa;AAAEC,EAAAA,GAAG,EAAHA;AAAF,CAAb,CAAb;AAEA,IAAME,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEP;AADS,CAAlB;AAIA,eAAe,YAAY;AAAA,kBACMF,QAAQ,CAAC;AACtCU,IAAAA,IAAI,EAAE,EADgC;AAEtCC,IAAAA,OAAO,EAAE;AAF6B,GAAD,CADd;AAAA,MAClBC,MADkB;AAAA,MACVC,YADU;;AAMzB,WAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEID,YAAAA,YAAY,CAAC,UAACE,SAAD;AAAA,uCAAqBA,SAArB;AAAgCJ,gBAAAA,OAAO,EAAE;AAAzC;AAAA,aAAD,CAAZ;AAFJ;AAAA,6CAG2BP,WAAW,CAACD,OAAO,CAACI,IAAD,EAAOC,SAAP,CAAR,CAHtC;;AAAA;AAGUQ,YAAAA,QAHV;AAIIH,YAAAA,YAAY,CAAC;AAAEH,cAAAA,IAAI,EAAEM,QAAR;AAAkBL,cAAAA,OAAO,EAAE;AAA3B,aAAD,CAAZ;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAMIM,YAAAA,OAAO,CAACC,GAAR;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUAjB,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,MAAM;AACP,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAOF,MAAP;AACD","sourcesContent":["// import axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { QUERY_GLOBAL_CONFIG } from '../../graphql';\nimport { execute, makePromise } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\n\nconst uri = 'http://localhost:3000/api/graphql';\nconst link = new HttpLink({ uri });\n\nconst operation = {\n  query: QUERY_GLOBAL_CONFIG,\n};\n\nexport default function () {\n  const [config, updateConfig] = useState({\n    data: {},\n    loading: false,\n  });\n\n  async function myFunc() {\n    try {\n      updateConfig((prevState) => ({ ...prevState, loading: true }));\n      const response = await makePromise(execute(link, operation));\n      updateConfig({ data: response, loading: false });\n    } catch (error) {\n      console.log(`received error ${error}`);\n    }\n  }\n\n  useEffect(() => {\n    myFunc();\n  }, []);\n\n  return config;\n}\n"]},"metadata":{},"sourceType":"module"}