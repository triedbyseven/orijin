{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      getGlobalConfig @client {\\n        businessName\\n        fullName\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Growing } from '../components/Spinner';\nimport { Alert } from '../components/Alerts';\nimport gql from 'graphql-tag'; // export interface DashboardState {\n//   price: number;\n// }\n// interface ProductInventoryData {\n//   getProduct: ProductInventory;\n// }\n// interface ProductInventory {\n//   price: number;\n// }\n\nvar Dashboard = function Dashboard() {\n  var _useState = useState([]),\n      notifications = _useState[0],\n      updateNotifications = _useState[1];\n\n  var QUERY_GLOBAL_CONFIG = gql(_templateObject());\n\n  var _useQuery = useQuery(QUERY_GLOBAL_CONFIG),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data; // Local Methods\n\n\n  var removeNotification = function removeNotification(id) {\n    var data = notifications;\n    var toasts = data.filter(function (item) {\n      return item.id !== id;\n    });\n    updateNotifications(toasts);\n  };\n\n  if (loading) {\n    return __jsx(Growing, {\n      visible: true,\n      fullScreen: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (error) return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(Alert, {\n    type: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Network Error.\"));\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, console.log(data), __jsx(\"div\", {\n    className: \"row align-items-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"p-3 mb-3 col-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Business Name: \", data.getGlobalConfig.businessName), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"Full Name: \", data.getGlobalConfig.fullName), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Hello\"))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard.tsx"],"names":["React","useState","useQuery","Growing","Alert","gql","Dashboard","notifications","updateNotifications","QUERY_GLOBAL_CONFIG","loading","error","data","removeNotification","id","toasts","filter","item","console","log","getGlobalConfig","businessName","fullName"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA,IAAMC,SAAmB,GAAG,SAAtBA,SAAsB,GAAM;AAAA,kBACaL,QAAQ,CAAC,EAAD,CADrB;AAAA,MACzBM,aADyB;AAAA,MACVC,mBADU;;AAGhC,MAAMC,mBAAmB,GAAGJ,GAAH,mBAAzB;;AAHgC,kBAYCH,QAAQ,CAACO,mBAAD,CAZT;AAAA,MAYxBC,OAZwB,aAYxBA,OAZwB;AAAA,MAYfC,KAZe,aAYfA,KAZe;AAAA,MAYRC,IAZQ,aAYRA,IAZQ,EAchC;;;AACA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,EAAD,EAAgB;AACzC,QAAMF,IAAI,GAAGL,aAAb;AACA,QAAMQ,MAAM,GAAGH,IAAI,CAACI,MAAL,CAAY,UAACC,IAAD;AAAA,aAAeA,IAAI,CAACH,EAAL,KAAYA,EAA3B;AAAA,KAAZ,CAAf;AAEAN,IAAAA,mBAAmB,CAACO,MAAD,CAAnB;AACD,GALD;;AAOA,MAAIL,OAAJ,EAAa;AACX,WAAO,MAAC,OAAD;AAAS,MAAA,OAAO,EAAE,IAAlB;AAAwB,MAAA,UAAU,EAAE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIC,KAAJ,EACE,OACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF;AAMF,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,OAAO,CAACC,GAAR,CAAYP,IAAZ,CADH,EAME;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAoBA,IAAI,CAACQ,eAAL,CAAqBC,YAAzC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBT,IAAI,CAACQ,eAAL,CAAqBE,QAArC,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,CADF,CANF,CADF;AAgBD,CAjDD;;AAmDA,eAAehB,SAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport ToastContainer from '../components/ToastContainer';\nimport { Growing } from '../components/Spinner';\nimport { Alert } from '../components/Alerts';\nimport gql from 'graphql-tag';\n\n// export interface DashboardState {\n//   price: number;\n// }\n\n// interface ProductInventoryData {\n//   getProduct: ProductInventory;\n// }\n\n// interface ProductInventory {\n//   price: number;\n// }\n\nconst Dashboard: React.FC = () => {\n  const [notifications, updateNotifications] = useState([]);\n\n  const QUERY_GLOBAL_CONFIG = gql`\n    query {\n      getGlobalConfig @client {\n        businessName\n        fullName\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(QUERY_GLOBAL_CONFIG);\n\n  // Local Methods\n  const removeNotification = (id: number) => {\n    const data = notifications;\n    const toasts = data.filter((item): any => item.id !== id);\n\n    updateNotifications(toasts);\n  };\n\n  if (loading) {\n    return <Growing visible={true} fullScreen={true} />;\n  }\n\n  if (error)\n    return (\n      <div className=\"container\">\n        <Alert type=\"danger\">Network Error.</Alert>\n      </div>\n    );\n\n  return (\n    <div className=\"container\">\n      {console.log(data)}\n      {/* <ToastContainer\n        allToasts={notifications}\n        removeNotification={removeNotification}\n      /> */}\n      <div className=\"row align-items-center\">\n        <div className=\"p-3 mb-3 col-3\">\n          <h1>Business Name: {data.getGlobalConfig.businessName}</h1>\n          <h1>Full Name: {data.getGlobalConfig.fullName}</h1>\n          <h1>Hello</h1>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}