{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/lib/with-apollo-client.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    var _super = _createSuper(Apollo);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function getInitialProps(ctx) {\n        var Component, router, appProps, apollo, apolloState;\n        return _regeneratorRuntime.async(function getInitialProps$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Component = ctx.Component, router = ctx.router;\n                appProps = {};\n\n                if (!App.getInitialProps) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(App.getInitialProps(ctx));\n\n              case 5:\n                appProps = _context.sent;\n\n              case 6:\n                // Run all GraphQL queries in the component tree\n                // and extract the resulting data\n                apollo = initApollo();\n\n                if (true) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.prev = 8;\n                _context.next = 11;\n                return _regeneratorRuntime.awrap(getDataFromTree(__jsx(App, _extends({}, appProps, {\n                  Component: Component,\n                  router: router,\n                  apolloClient: apollo,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 24,\n                    columnNumber: 13\n                  }\n                }))));\n\n              case 11:\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](8);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t0);\n\n              case 16:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 17:\n                // Extract query data from the Apollo store\n                apolloState = apollo.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                  apolloState: apolloState\n                }));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, [[8, 13]], Promise);\n      }\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _super.call(this, props);\n      _this.apolloClient = initApollo(props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 14\n          }\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/lib/with-apollo-client.js"],"names":["React","initApollo","Head","getDataFromTree","App","ctx","Component","router","appProps","getInitialProps","apollo","console","error","rewind","apolloState","cache","extract","props","apolloClient"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAe,UAAAC,GAAG,EAAI;AAAA;;AACpB;AAAA;;AAAA;;AAAA;AAAA;AAAA,sCAE+BC,GAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAGYC,gBAAAA,SAHZ,GAGkCD,GAHlC,CAGYC,SAHZ,EAGuBC,MAHvB,GAGkCF,GAHlC,CAGuBE,MAHvB;AAKQC,gBAAAA,QALR,GAKmB,EALnB;;AAAA,qBAMQJ,GAAG,CAACK,eANZ;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAOuBL,GAAG,CAACK,eAAJ,CAAoBJ,GAApB,CAPvB;;AAAA;AAOMG,gBAAAA,QAPN;;AAAA;AAUI;AACA;AACME,gBAAAA,MAZV,GAYmBT,UAAU,EAZ7B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,iDAgBcE,eAAe,CACnB,MAAC,GAAD,eACMK,QADN;AAEE,kBAAA,SAAS,EAAEF,SAFb;AAGE,kBAAA,MAAM,EAAEC,MAHV;AAIE,kBAAA,YAAY,EAAEG,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADmB,CAhB7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBQ;AACA;AACA;AACAC,gBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AA5BR;AA+BM;AACA;AACAV,gBAAAA,IAAI,CAACW,MAAL;;AAjCN;AAoCI;AACMC,gBAAAA,WArCV,GAqCwBJ,MAAM,CAACK,KAAP,CAAaC,OAAb,EArCxB;AAAA,mEAwCSR,QAxCT;AAyCMM,kBAAAA,WAAW,EAAXA;AAzCN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6CE,oBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gCAAMA,KAAN;AACA,YAAKC,YAAL,GAAoBjB,UAAU,CAACgB,KAAK,CAACH,WAAP,CAA9B;AAFiB;AAGlB;;AAhDH;AAAA;AAAA,+BAkDW;AACP,eAAO,MAAC,GAAD,eAAS,KAAKG,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AApDH;;AAAA;AAAA,IAA4BlB,KAAK,CAACM,SAAlC,0CACuB,iBADvB;AAsDD,CAvDD","sourcesContent":["import React from 'react';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)';\n    static async getInitialProps(ctx) {\n      const { Component, router } = ctx;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo();\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}