{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_GLOBAL_CONFIG } from '../../graphql';\nimport { Growing } from '../../components/Spinner';\nimport { Alert } from '../../components/Alerts';\nimport { Main } from '../../components/Dashboard';\n\nconst Dashboard = () => {\n  //   const [notifications, updateNotifications] = useState([]);\n  // Querys\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(QUERY_GLOBAL_CONFIG, {\n    onError: error => {\n      console.log(error);\n    },\n    onCompleted: data => {\n      console.log('QUERY_GLOBAL_CONFIG Completed!');\n    }\n  }); // Local Methods\n  //   const removeNotification = (id: number) => {\n  //     const data = notifications;\n  //     const toasts = data.filter((item): any => item.id !== id);\n  //     updateNotifications(toasts);\n  //   };\n\n  if (loading) {\n    return __jsx(Growing, {\n      visible: true,\n      fullScreen: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (error) return __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(Alert, {\n    type: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Network Error.\"));\n  return __jsx(React.Fragment, null, __jsx(Main, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard/index.tsx"],"names":["React","useQuery","QUERY_GLOBAL_CONFIG","Growing","Alert","Main","Dashboard","loading","error","data","onError","console","log","onCompleted"],"mappings":";;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,mBAAT,QAAoC,eAApC;AAEA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA,SAASC,IAAT,QAAqB,4BAArB;;AAWA,MAAMC,SAAmB,GAAG,MAAM;AAChC;AAEA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BR,QAAQ,CACvCC,mBADuC,EAEvC;AACEQ,IAAAA,OAAO,EAAGF,KAAD,IAAW;AAClBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD,KAHH;AAIEK,IAAAA,WAAW,EAAGJ,IAAD,IAAU;AACrBE,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AANH,GAFuC,CAAzC,CAJgC,CAgBhC;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAIL,OAAJ,EAAa;AACX,WAAO,MAAC,OAAD;AAAS,MAAA,OAAO,EAAE,IAAlB;AAAwB,MAAA,UAAU,EAAE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIC,KAAJ,EACE,OACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF;AAMF,SACE,4BAKE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CA5CD;;AA8CA,eAAeH,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_GLOBAL_CONFIG } from '../../graphql';\nimport ToastContainer from '../../components/ToastContainer';\nimport { Growing } from '../../components/Spinner';\nimport { Alert } from '../../components/Alerts';\nimport { Main } from '../../components/Dashboard';\n\ninterface GetGlobalConfigData {\n  getGlobalConfig: ProductInventory;\n}\n\ninterface ProductInventory {\n  businessName: string;\n  fullName: string;\n}\n\nconst Dashboard: React.FC = () => {\n  //   const [notifications, updateNotifications] = useState([]);\n\n  // Querys\n  const { loading, error, data } = useQuery<GetGlobalConfigData>(\n    QUERY_GLOBAL_CONFIG,\n    {\n      onError: (error) => {\n        console.log(error);\n      },\n      onCompleted: (data) => {\n        console.log('QUERY_GLOBAL_CONFIG Completed!');\n      },\n    }\n  );\n\n  // Local Methods\n  //   const removeNotification = (id: number) => {\n  //     const data = notifications;\n  //     const toasts = data.filter((item): any => item.id !== id);\n\n  //     updateNotifications(toasts);\n  //   };\n\n  if (loading) {\n    return <Growing visible={true} fullScreen={true} />;\n  }\n\n  if (error)\n    return (\n      <div className=\"container\">\n        <Alert type=\"danger\">Network Error.</Alert>\n      </div>\n    );\n\n  return (\n    <>\n      {/* <ToastContainer\n        allToasts={notifications}\n        removeNotification={removeNotification}\n      /> */}\n      <Main data={data} />\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}