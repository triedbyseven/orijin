{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n// import axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { QUERY_GLOBAL_CONFIG } from '../../graphql';\nimport { execute, makePromise } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nvar uri = 'http://localhost:3000/api/graphql';\nvar link = new HttpLink({\n  uri: uri\n});\nvar operation = {\n  query: QUERY_GLOBAL_CONFIG\n};\n\nfunction myFunc() {\n  var response;\n  return _regeneratorRuntime.async(function myFunc$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(makePromise(execute(link, operation)));\n\n        case 3:\n          response = _context.sent;\n          console.log(\"received data \".concat(JSON.stringify(response, null, 2)));\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(\"received error \".concat(_context.t0));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nexport default function () {\n  var _useState = useState({}),\n      config = _useState[0],\n      updateConfig = _useState[1];\n\n  useEffect(function () {\n    myFunc();\n  }, []);\n  return config;\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/src/customHooks/useConfigQuery.ts"],"names":["useState","useEffect","QUERY_GLOBAL_CONFIG","execute","makePromise","HttpLink","uri","link","operation","query","myFunc","response","console","log","JSON","stringify","config","updateConfig"],"mappings":";AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,IAAMC,GAAG,GAAG,mCAAZ;AACA,IAAMC,IAAI,GAAG,IAAIF,QAAJ,CAAa;AAAEC,EAAAA,GAAG,EAAHA;AAAF,CAAb,CAAb;AAEA,IAAME,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEP;AADS,CAAlB;;AAIA,SAAeQ,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAE2BN,WAAW,CAACD,OAAO,CAACI,IAAD,EAAOC,SAAP,CAAR,CAFtC;;AAAA;AAEUG,UAAAA,QAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,yBAA6BC,IAAI,CAACC,SAAL,CAAeJ,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAA7B;AAHJ;AAAA;;AAAA;AAAA;AAAA;AAKIC,UAAAA,OAAO,CAACC,GAAR;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,eAAe,YAAY;AAAA,kBACMb,QAAQ,CAAC,EAAD,CADd;AAAA,MAClBgB,MADkB;AAAA,MACVC,YADU;;AAGzBhB,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,MAAM;AACP,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAOM,MAAP;AACD","sourcesContent":["// import axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { QUERY_GLOBAL_CONFIG } from '../../graphql';\nimport { execute, makePromise } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\n\nconst uri = 'http://localhost:3000/api/graphql';\nconst link = new HttpLink({ uri });\n\nconst operation = {\n  query: QUERY_GLOBAL_CONFIG,\n};\n\nasync function myFunc() {\n  try {\n    const response = await makePromise(execute(link, operation));\n    console.log(`received data ${JSON.stringify(response, null, 2)}`);\n  } catch (error) {\n    console.log(`received error ${error}`);\n  }\n}\n\nexport default function () {\n  const [config, updateConfig] = useState({});\n\n  useEffect(() => {\n    myFunc();\n  }, []);\n\n  return config;\n}\n"]},"metadata":{},"sourceType":"module"}