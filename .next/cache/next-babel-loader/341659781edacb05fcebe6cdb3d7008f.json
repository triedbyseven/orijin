{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!false) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: false,\n    ssrMode: !false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache().restore(initialState || {\n      getProducts: []\n    })\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!false) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/lib/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","global","create","initialState","connectToDevTools","ssrMode","link","uri","credentials","cache","restore","getProducts","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,MAAJ,EAAsB;AACpBC,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACD;;AAED,SAASG,MAAT,CAAgBC,YAAhB,EAA8B;AAC5B;AACA,SAAO,IAAIP,YAAJ,CAAiB;AACtBQ,IAAAA,iBAAiB,OADK;AAEtBC,IAAAA,OAAO,EAAE,MAFa;AAEK;AAC3BC,IAAAA,IAAI,EAAE,IAAIR,QAAJ,CAAa;AACjBS,MAAAA,GAAG,EAAE,mCADY;AACyB;AAC1CC,MAAAA,WAAW,EAAE,aAFI,CAEW;;AAFX,KAAb,CAHgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ,GAAoBa,OAApB,CAA4BP,YAAY,IAAI;AAAEQ,MAAAA,WAAW,EAAE;AAAf,KAA5C;AAPe,GAAjB,CAAP;AASD;;AAED,eAAe,SAASC,UAAT,CAAoBT,YAApB,EAAkC;AAC/C;AACA;AACA,MAAI,MAAJ,EAAsB;AACpB,WAAOD,MAAM,CAACC,YAAD,CAAb;AACD,GAL8C,CAO/C;;;AACA,MAAI,CAACH,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOH,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache().restore(initialState || { getProducts: [] }),\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}