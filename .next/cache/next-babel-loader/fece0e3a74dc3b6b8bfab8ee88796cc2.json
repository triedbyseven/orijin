{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      getProduct @client {\\n        id\\n        price\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { QUERY_PRODUCT_PRICE, MUTATION_PRICE } from '../graphql';\nimport { addNotification } from '../utils/toast';\nimport { submitPrice } from '../utils/price';\nimport ToastContainer from '../components/ToastContainer';\nimport { Card, CardBody, CardTitle } from '../components/Card';\nimport { FormGroup, InputPrice } from '../components/Form';\nimport { Button } from '../components/Button';\nimport { Growing } from '../components/Spinner';\nimport { Alert } from '../components/Alerts';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nvar Dashboard = function Dashboard() {\n  // State\n  var _useState = useState({\n    price: 0\n  }),\n      state = _useState[0],\n      updateState = _useState[1];\n\n  var _useState2 = useState([]),\n      notifications = _useState2[0],\n      updateNotifications = _useState2[1]; // Querys\n\n\n  var _useQuery = useQuery(QUERY_PRODUCT_PRICE, {\n    onError: function onError(error) {\n      console.log(error);\n    },\n    onCompleted: function onCompleted(data) {\n      var price = data.getProduct.price;\n      updateState(function (prevState) {\n        return _objectSpread({}, prevState, {\n          price: price\n        });\n      });\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data; // Mutations\n\n\n  var _useMutation = useMutation(MUTATION_PRICE, {\n    onError: function onError(error) {\n      console.log(error);\n    },\n    onCompleted: function onCompleted() {\n      addNotification('Notification', \"Your price has been updated to $\".concat(state.price.toFixed(2)), 'info', notifications, updateNotifications);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updatePrice = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      MutationUpdatePriceLoading = _useMutation2$.loading,\n      MutationUpdatePriceError = _useMutation2$.error; // Local Methods\n\n\n  var removeNotification = function removeNotification(id) {\n    var data = notifications;\n    var toasts = data.filter(function (item) {\n      return item.id !== id;\n    });\n    updateNotifications(toasts);\n  };\n\n  var _useApolloClient = useApolloClient(),\n      cache = _useApolloClient.cache;\n\n  var onChangeMe = function onChangeMe(e) {\n    var price = parseFloat(e.target.value);\n    var data = cache.readQuery({\n      query: QUERY_PRODUCT\n    });\n    console.log(data); // cache.writeData({ data: { getProduct: { price } } });\n    // updateState({ price });\n  };\n\n  if (loading) {\n    return __jsx(Growing, {\n      visible: true,\n      fullScreen: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (error) return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(Alert, {\n    type: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Network Error.\"));\n  var price = data.getProduct.price;\n  var QUERY_PRODUCT = gql(_templateObject());\n\n  var _useQuery2 = useQuery(QUERY_PRODUCT),\n      localData = _useQuery2.data;\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, console.log(localData), __jsx(ToastContainer, {\n    allToasts: notifications,\n    removeNotification: removeNotification,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"row align-items-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"p-3 mb-3 col-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, __jsx(CardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, __jsx(CardTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, \"Item Price: \", localData.getProduct.price.toFixed(2)), __jsx(\"form\", {\n    onSubmit: function onSubmit() {\n      return event.preventDefault();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, __jsx(FormGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, __jsx(InputPrice, {\n    onChange: onChangeMe,\n    labelTitle: \"Item Price\",\n    price: localData.getProduct.price.toFixed(2),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  }), __jsx(Button, {\n    submitPrice: submitPrice,\n    updatePrice: updatePrice,\n    query: QUERY_PRODUCT_PRICE,\n    mutateLoading: MutationUpdatePriceLoading,\n    state: state,\n    data: price,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 19\n    }\n  }, __jsx(Growing, {\n    visible: MutationUpdatePriceLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }), MutationUpdatePriceLoading ? ' Loading...' : 'Update', MutationUpdatePriceError ? 'Network error occured.' : ''))))))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/dashboard.tsx"],"names":["React","useState","useQuery","useMutation","QUERY_PRODUCT_PRICE","MUTATION_PRICE","addNotification","submitPrice","ToastContainer","Card","CardBody","CardTitle","FormGroup","InputPrice","Button","Growing","Alert","useApolloClient","gql","Dashboard","price","state","updateState","notifications","updateNotifications","onError","error","console","log","onCompleted","data","getProduct","prevState","loading","toFixed","updatePrice","MutationUpdatePriceLoading","MutationUpdatePriceError","removeNotification","id","toasts","filter","item","cache","onChangeMe","e","parseFloat","target","value","readQuery","query","QUERY_PRODUCT","localData","event","preventDefault"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { QUERY_PRODUCT_PRICE, MUTATION_PRICE } from '../graphql';\nimport { addNotification } from '../utils/toast';\nimport { submitPrice } from '../utils/price';\nimport ToastContainer from '../components/ToastContainer';\nimport { Card, CardBody, CardTitle } from '../components/Card';\nimport { FormGroup, InputPrice } from '../components/Form';\nimport { Button } from '../components/Button';\nimport { Growing } from '../components/Spinner';\nimport { Alert } from '../components/Alerts';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nexport interface DashboardState {\n  price: number;\n}\n\ninterface ProductInventoryData {\n  getProduct: ProductInventory;\n}\n\ninterface ProductInventory {\n  price: number;\n}\n\nconst Dashboard: React.FC = () => {\n  // State\n  const [state, updateState] = useState<DashboardState>({\n    price: 0,\n  });\n  const [notifications, updateNotifications] = useState([]);\n\n  // Querys\n  const { loading, error, data } = useQuery<ProductInventoryData>(\n    QUERY_PRODUCT_PRICE,\n    {\n      onError: (error) => {\n        console.log(error);\n      },\n      onCompleted: (data) => {\n        const {\n          getProduct: { price },\n        } = data;\n\n        updateState((prevState) => ({ ...prevState, price }));\n      },\n    }\n  );\n\n  // Mutations\n  const [\n    updatePrice,\n    { loading: MutationUpdatePriceLoading, error: MutationUpdatePriceError },\n  ] = useMutation(MUTATION_PRICE, {\n    onError: (error) => {\n      console.log(error);\n    },\n    onCompleted: () => {\n      addNotification(\n        'Notification',\n        `Your price has been updated to $${state.price.toFixed(2)}`,\n        'info',\n        notifications,\n        updateNotifications\n      );\n    },\n  });\n\n  // Local Methods\n  const removeNotification = (id: number) => {\n    const data = notifications;\n    const toasts = data.filter((item): any => item.id !== id);\n\n    updateNotifications(toasts);\n  };\n\n  const { cache } = useApolloClient();\n\n  const onChangeMe = (e) => {\n    const price = parseFloat(e.target.value);\n\n    const data = cache.readQuery({ query: QUERY_PRODUCT });\n\n    console.log(data);\n\n    // cache.writeData({ data: { getProduct: { price } } });\n\n    // updateState({ price });\n  };\n\n  if (loading) {\n    return <Growing visible={true} fullScreen={true} />;\n  }\n\n  if (error)\n    return (\n      <div className=\"container\">\n        <Alert type=\"danger\">Network Error.</Alert>\n      </div>\n    );\n\n  const {\n    getProduct: { price },\n  } = data;\n\n  const QUERY_PRODUCT = gql`\n    query {\n      getProduct @client {\n        id\n        price\n      }\n    }\n  `;\n\n  const { data: localData } = useQuery(QUERY_PRODUCT);\n\n  return (\n    <div className=\"container\">\n      {console.log(localData)}\n      <ToastContainer\n        allToasts={notifications}\n        removeNotification={removeNotification}\n      />\n      <div className=\"row align-items-center\">\n        <div className=\"p-3 mb-3 col-3\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                Item Price: {localData.getProduct.price.toFixed(2)}\n              </CardTitle>\n              <form onSubmit={() => event.preventDefault()}>\n                <FormGroup>\n                  <InputPrice\n                    onChange={onChangeMe}\n                    labelTitle=\"Item Price\"\n                    price={localData.getProduct.price.toFixed(2)}\n                  />\n                  <Button\n                    submitPrice={submitPrice}\n                    updatePrice={updatePrice}\n                    query={QUERY_PRODUCT_PRICE}\n                    mutateLoading={MutationUpdatePriceLoading}\n                    state={state}\n                    data={price}\n                  >\n                    <Growing visible={MutationUpdatePriceLoading} />\n                    {MutationUpdatePriceLoading ? ' Loading...' : 'Update'}\n                    {MutationUpdatePriceError ? 'Network error occured.' : ''}\n                  </Button>\n                </FormGroup>\n              </form>\n            </CardBody>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}