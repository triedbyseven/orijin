{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/setup.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nconst RUN_SETUP = gql`\n  mutation runSetup($success: Boolean) {\n    runSetup(success: $success) {\n      success\n    }\n  }\n`;\n\nconst Setup = () => {\n  const {\n    0: state,\n    1: updateState\n  } = useState(false);\n  const [runSetup, {\n    data\n  }] = useMutation(RUN_SETUP, {\n    onCompleted: () => updateState(false)\n  });\n\n  const runFullSetup = success => {\n    updateState(true);\n    runSetup({\n      variables: {\n        success\n      }\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"SetUp Page\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"All right your ready to run your website setup!\"), __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    onClick: () => runFullSetup(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Run SetUp\"), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, state ? '...loading' : ''));\n};\n\nexport default Setup;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Development/Nextjs/landing-page-prodcut-001/pages/setup.tsx"],"names":["React","useState","useMutation","gql","RUN_SETUP","Setup","state","updateState","runSetup","data","onCompleted","runFullSetup","success","variables"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAIA,MAAMC,SAAS,GAAGD,GAAI;;;;;;CAAtB;;AAQA,MAAME,KAA2B,GAAG,MAAM;AACxC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAuBN,QAAQ,CAAC,KAAD,CAArC;AACA,QAAM,CAACO,QAAD,EAAW;AAAEC,IAAAA;AAAF,GAAX,IAA4BP,WAAW,CAACE,SAAD,EAAY;AACvDM,IAAAA,WAAW,EAAE,MAAMH,WAAW,CAAC,KAAD;AADyB,GAAZ,CAA7C;;AAIA,QAAMI,YAAY,GAAGC,OAAO,IAAI;AAC9BL,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,SAAS,EAAE;AAAED,QAAAA;AAAF;AAAb,KAAD,CAAR;AACD,GAHD;;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAFF,EAGE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,iBAFZ;AAGE,IAAA,OAAO,EAAE,MAAMD,YAAY,CAAC,IAAD,CAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOL,KAAK,GAAG,YAAH,GAAkB,EAA9B,CAVF,CADF;AAcD,CAzBD;;AA2BA,eAAeD,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nexport interface SetupProps {}\n\nconst RUN_SETUP = gql`\n  mutation runSetup($success: Boolean) {\n    runSetup(success: $success) {\n      success\n    }\n  }\n`;\n\nconst Setup: React.FC<SetupProps> = () => {\n  const [state, updateState] = useState(false);\n  const [runSetup, { data }]: any = useMutation(RUN_SETUP, {\n    onCompleted: () => updateState(false)\n  });\n\n  const runFullSetup = success => {\n    updateState(true);\n    runSetup({ variables: { success } });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>SetUp Page</h1>\n      <p>All right your ready to run your website setup!</p>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        onClick={() => runFullSetup(true)}\n      >\n        Run SetUp\n      </button>\n      <span>{state ? '...loading' : ''}</span>\n    </div>\n  );\n};\n\nexport default Setup;\n"]},"metadata":{},"sourceType":"module"}